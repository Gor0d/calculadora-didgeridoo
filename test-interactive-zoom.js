/**
 * Teste das funcionalidades interativas de zoom e pan
 * Simula gestos de pinch, pan e mouse wheel
 */

// Simular estado da visualiza√ß√£o interativa
class InteractiveVisualization {
  constructor() {
    this.zoom = 1.0;
    this.panX = 0;
    this.panY = 0;
    this.minZoom = 0.5;
    this.maxZoom = 3.0;
  }

  // Simular pinch zoom (dois dedos)
  pinchZoom(startDistance, endDistance, initialZoom = this.zoom) {
    if (startDistance <= 0 || endDistance <= 0) return this.zoom;
    
    const scale = endDistance / startDistance;
    const newZoom = Math.max(this.minZoom, Math.min(this.maxZoom, initialZoom * scale));
    
    console.log(`ü§è Pinch: ${startDistance.toFixed(0)}px ‚Üí ${endDistance.toFixed(0)}px`);
    console.log(`   Escala: ${scale.toFixed(2)}x`);
    console.log(`   Zoom: ${this.zoom.toFixed(2)} ‚Üí ${newZoom.toFixed(2)}`);
    
    this.zoom = newZoom;
    return this.zoom;
  }

  // Simular pan (arrastar)
  pan(deltaX, deltaY) {
    if (this.zoom <= 1.0) {
      console.log(`‚òùÔ∏è Pan bloqueado: zoom ${this.zoom.toFixed(2)} ‚â§ 1.0`);
      return { x: this.panX, y: this.panY };
    }

    const newPanX = this.panX + deltaX * 0.5; // Damping factor
    const newPanY = this.panY + deltaY * 0.5;
    
    console.log(`‚òùÔ∏è Pan: (${deltaX.toFixed(0)}, ${deltaY.toFixed(0)})`);
    console.log(`   Offset: (${this.panX.toFixed(0)}, ${this.panY.toFixed(0)}) ‚Üí (${newPanX.toFixed(0)}, ${newPanY.toFixed(0)})`);
    
    this.panX = newPanX;
    this.panY = newPanY;
    return { x: this.panX, y: this.panY };
  }

  // Simular mouse wheel
  mouseWheel(deltaY) {
    const delta = deltaY > 0 ? -0.1 : 0.1;
    const newZoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.zoom + delta));
    
    console.log(`üñ±Ô∏è  Mouse wheel: deltaY=${deltaY}`);
    console.log(`   Zoom: ${this.zoom.toFixed(2)} ‚Üí ${newZoom.toFixed(2)}`);
    
    this.zoom = newZoom;
    return this.zoom;
  }

  // Reset para posi√ß√£o inicial
  reset() {
    console.log(`üîÑ Reset: zoom ${this.zoom.toFixed(2)} ‚Üí 1.0, pan (${this.panX.toFixed(0)}, ${this.panY.toFixed(0)}) ‚Üí (0, 0)`);
    this.zoom = 1.0;
    this.panX = 0;
    this.panY = 0;
  }

  // Estado atual
  getState() {
    return {
      zoom: this.zoom,
      pan: { x: this.panX, y: this.panY },
      isZoomedIn: this.zoom > 1.0,
      isPanned: Math.abs(this.panX) > 10 || Math.abs(this.panY) > 10
    };
  }
}

console.log('=== TESTE DE FUNCIONALIDADES INTERATIVAS ===\n');

const visualization = new InteractiveVisualization();

// Teste 1: Pinch Zoom
console.log('ü§è TESTE 1: PINCH ZOOM\n');

console.log('Simulando pinch zoom (afastar dedos):');
visualization.pinchZoom(100, 150); // 1.5x zoom
console.log(`Estado: zoom=${visualization.getState().zoom.toFixed(2)}\n`);

console.log('Simulando pinch zoom (aproximar dedos):');  
visualization.pinchZoom(150, 100, visualization.zoom); // 0.67x zoom
console.log(`Estado: zoom=${visualization.getState().zoom.toFixed(2)}\n`);

console.log('Testando limites de zoom:');
visualization.pinchZoom(100, 500); // Muito zoom
console.log(`Estado: zoom=${visualization.getState().zoom.toFixed(2)} (limitado)\n`);

// Teste 2: Pan (Arrastar)
console.log('‚òùÔ∏è TESTE 2: PAN (ARRASTAR)\n');

console.log('Tentando pan com zoom 1.0 (deve ser bloqueado):');
visualization.reset();
visualization.pan(50, 30);
console.log(`Estado: ${JSON.stringify(visualization.getState(), null, 2)}\n`);

console.log('Pan com zoom > 1.0:');
visualization.zoom = 2.0;
visualization.pan(50, 30);
console.log(`Estado: ${JSON.stringify(visualization.getState(), null, 2)}\n`);

console.log('Continuando pan:');
visualization.pan(-100, 20);
console.log(`Estado: ${JSON.stringify(visualization.getState(), null, 2)}\n`);

// Teste 3: Mouse Wheel
console.log('üñ±Ô∏è  TESTE 3: MOUSE WHEEL\n');

visualization.reset();
console.log('Scroll para baixo (zoom out):');
visualization.mouseWheel(1);
console.log(`Estado: zoom=${visualization.getState().zoom.toFixed(2)}\n`);

console.log('Scroll para cima (zoom in):');
visualization.mouseWheel(-1);
visualization.mouseWheel(-1);
console.log(`Estado: zoom=${visualization.getState().zoom.toFixed(2)}\n`);

// Teste 4: Cen√°rios de Uso
console.log('üéØ TESTE 4: CEN√ÅRIOS DE USO REALISTAS\n');

console.log('Cen√°rio: An√°lise detalhada do bocal');
visualization.reset();
console.log('1. Fazer zoom 2x no bocal:');
visualization.pinchZoom(100, 200);
console.log('2. Pan para focar regi√£o do bocal:');
visualization.pan(-50, 0);
console.log(`Estado final: ${JSON.stringify(visualization.getState(), null, 2)}\n`);

console.log('Cen√°rio: Navega√ß√£o r√°pida:');
console.log('1. Zoom m√°ximo com mouse wheel:');
for (let i = 0; i < 20; i++) {
  visualization.mouseWheel(-1);
}
console.log('2. Explorar geometria com pan:');
visualization.pan(100, 0);  // Direita
visualization.pan(-200, 0); // Esquerda
visualization.pan(100, 50); // Centro-baixo
console.log(`Estado final: ${JSON.stringify(visualization.getState(), null, 2)}\n`);

// Teste 5: Valida√ß√£o de Limites
console.log('‚ö†Ô∏è  TESTE 5: VALIDA√á√ÉO DE LIMITES\n');

visualization.reset();
console.log('Testando zoom m√≠nimo:');
for (let i = 0; i < 10; i++) {
  visualization.mouseWheel(1);
}
console.log(`Zoom final: ${visualization.getState().zoom.toFixed(2)} (min: 0.5)\n`);

console.log('Testando zoom m√°ximo:');
visualization.reset();
for (let i = 0; i < 30; i++) {
  visualization.mouseWheel(-1);
}
console.log(`Zoom final: ${visualization.getState().zoom.toFixed(2)} (max: 3.0)\n`);

console.log('üéØ RESUMO DAS FUNCIONALIDADES IMPLEMENTADAS:\n');

console.log('üì± GESTOS M√ìVEIS:');
console.log('‚úÖ Pinch zoom (dois dedos afastando/aproximando)');
console.log('‚úÖ Pan habilitado apenas quando zoom > 1.0');
console.log('‚úÖ Damping factor para movimentos suaves');
console.log('‚úÖ Limites de zoom (0.5x - 3.0x)');
console.log('');

console.log('üñ•Ô∏è  DESKTOP:');
console.log('‚úÖ Mouse wheel para zoom incremental');
console.log('‚úÖ Preven√ß√£o de scroll da p√°gina durante zoom');
console.log('‚úÖ Compatibilidade web/desktop');
console.log('');

console.log('üé® INTERFACE:');
console.log('‚úÖ Hint visual de gestos quando zoom = 1.0');
console.log('‚úÖ Bot√£o "Centralizar" quando panned');
console.log('‚úÖ Bot√£o reset de zoom nos controles');
console.log('‚úÖ Anima√ß√µes suaves (Animated API)');
console.log('');

console.log('üîß FUNCIONALIDADES T√âCNICAS:');
console.log('‚úÖ PanResponder para multi-touch');
console.log('‚úÖ C√°lculo de dist√¢ncia entre dedos para pinch');
console.log('‚úÖ Animated.Value para performance');
console.log('‚úÖ Overflow hidden para container');
console.log('');

console.log('üìä CASOS DE USO COBERTOS:');
console.log('‚Ä¢ An√°lise detalhada de regi√µes espec√≠ficas (bocal, expans√£o)');
console.log('‚Ä¢ Navega√ß√£o r√°pida em geometrias complexas (muitos pontos)');
console.log('‚Ä¢ Zoom preciso para medi√ß√µes');
console.log('‚Ä¢ Explora√ß√£o livre da forma do didgeridoo');
console.log('‚Ä¢ Compatibilidade mobile e desktop');